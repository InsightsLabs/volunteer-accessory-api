on:
  push:
    branches:
      - main
env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_NAME: phelliperodrigues/volunteer-accessory-api

jobs:
  test:
    name: Test and Verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and run tests
        run: |
          mvn verify -Ptest  -Dspring.profiles.active=test
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      - name: Send Slack notification on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          PR_TITLE: |
            ${{ github.event.pull_request.title }}  PR: #${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.name }}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x:\nFail Deploy\n*Job*:test\n*Repository*: ${APP_NAME}\n*Author*:${PR_AUTHOR}\n*Commit/PR*:${PR_TITLE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL

  build_and_publish:
    name: Build and Publish Dockerhub
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn package -DskipTests

      - name: Set up QEMU
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Login to Docker Hub
        run: docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image (arm64)
        run: |
          echo Job ID: ${{ steps.get-job-id.outputs.job_id }}
          docker buildx create --use
          docker buildx build --platform=linux/arm64 -t $IMAGE_NAME-arm64 --push .

      - name: Logout to Docker Hub for amd64
        run: docker logout

      - name: Set up Docker Buildx for amd64
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --use

      - name: Login to Docker Hub amd64
        run: docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image (amd64)
        run: |
          echo Job ID: ${{ steps.get-job-id.outputs.job_id }}
          docker buildx build --platform=linux/amd64 -t $IMAGE_NAME-amd64 --push .

      - name: Send Slack notification on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          PR_TITLE: ${{ github.event.pull_request.title }} + ${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          AUTHOR_NAME: ${{github.event.commits[0].author.name}}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x:\nFail Deploy\n*Job*:build_and_publish\n*Repository*: ${APP_NAME}\n*Author*:${AUTHOR_NAME} ${PR_AUTHOR}\n*Commit/PR*:${COMMIT_MESSAGE} ${PR_TITLE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL

  notify-result:
    runs-on: ubuntu-latest

    needs: build_and_publish

    steps:
      - name: Send Slack notification on success
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          PR_TITLE: ${{ github.event.pull_request.title }} + ${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.login }}
          AUTHOR_NAME: ${{github.event.commits[0].author.name}}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":white_check_mark:\n Success Deploy\n*Repository*: ${APP_NAME}\n*Author*:${AUTHOR_NAME} ${PR_AUTHOR}\n*Commit/PR*:${COMMIT_MESSAGE} ${PR_TITLE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL
