on:
  push:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_NAME: phelliperodrigues/volunteer-accessory-api

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and run tests
        run: |
          mvn test -Ptest  -Dspring.profiles.active=test
      - name: Send Slack notification on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          AUTHOR_NAME: ${{github.event.commits[0].author.name}}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x:\nFail Deploy\n*Job*:test\n*Repository*: ${APP_NAME}\n*Author*:${AUTHOR_NAME}\n*Commit*:${COMMIT_MESSAGE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL

  coverage_validator:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      - name: Run Coverage
        run: |
          mvn verify -Pcoverage -Dspring.profiles.active=test
      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: |
            ${{ github.workspace }}/**/build/reports/jacoco/prodNormalDebugCoverage/prodNormalDebugCoverage.xml,
            ${{ github.workspace }}/**/build/reports/jacoco/**/debugCoverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 90
          min-coverage-changed-files: 90
      - name: Fail PR if overall coverage is less than 80%
        if: ${{ steps.jacoco.outputs.coverage-overall < 80.0 }}
        uses: actions/github-script@v6
        with:
          script: |
            core.setFailed('Overall coverage is less than 90%! COVERAGE: ' + ${{steps.jacoco.outputs.coverage-overall}})
      - name: Jacoco Report to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: ${{ github.workspace }}/build/reports/jacoco/testCoverage/testCoverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 90
          min-coverage-changed-files: 90
          title: '# :lobster: Coverage Report'
          update-comment: true
          pass-emoji: ':green_circle:'
          fail-emoji: ':red_circle:'

      - name: Send Slack notification on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          AUTHOR_NAME: ${{github.event.commits[0].author.name}}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x:\nFail Deploy\n*Job*:coverage_validator\n*Repository*: ${APP_NAME}\n*Author*:${AUTHOR_NAME}\n*Commit*:${COMMIT_MESSAGE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL

  build_and_publish:
    needs: coverage_validator

    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn package -DskipTests

      - name: Set up QEMU
        run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

      - name: Login to Docker Hub
        run: docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image (arm64)
        run: |
          echo Job ID: ${{ steps.get-job-id.outputs.job_id }}
          docker buildx create --use
          docker buildx build --platform=linux/arm64 -t $IMAGE_NAME-arm64 --push .

      - name: Logout to Docker Hub for amd64
        run: docker logout

      - name: Set up Docker Buildx for amd64
        run: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker buildx create --use

      - name: Login to Docker Hub amd64
        run: docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin <<< ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image (amd64)
        run: |
          echo Job ID: ${{ steps.get-job-id.outputs.job_id }}
          docker buildx build --platform=linux/amd64 -t $IMAGE_NAME-amd64 --push .

      - name: Send Slack notification on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          AUTHOR_NAME: ${{github.event.commits[0].author.name}}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x:\nFail Deploy\n*Job*:build_and_publish\n*Repository*: ${APP_NAME}\n*Author*:${AUTHOR_NAME}\n*Commit*:${COMMIT_MESSAGE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL

#  deploy:
#    runs-on: ubuntu-latest
#    needs: build_and_publish
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Configure SSH key
#        run: |
#          mkdir -p ~/.ssh
#          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
#          chmod 600 ~/.ssh/id_rsa
#          ssh-keyscan 129.213.129.221 >> ~/.ssh/known_hosts
#
#      - name: Deploy to Oracle Cloud
#        run: |
#          ssh opc@129.213.129.221 "sh execute.sh"
#      - name: Send Slack notification on failure
#        if: failure()
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
#          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
#          AUTHOR_NAME: ${{github.event.commits[0].author.name}}
#          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
#        run: |
#          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x:\nFail Deploy\n*Job*:deploy\n*Repository*: ${APP_NAME}\n*Author*:${AUTHOR_NAME}\n*Commit*:${COMMIT_MESSAGE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL
#  health-check:
#    runs-on: ubuntu-latest
#
#    needs: deploy
#
#    steps:
#      - name: Wait for the service to be available
#        run: |
#          response=$(curl -k --retry 10 --retry-connrefused --retry-delay 5 -v https://129.213.129.221/health)
#          if echo "$response" | grep -q "UP"; then
#            echo "Health-check succeeded: $response"
#          else
#            echo "Health-check failed: $response"
#            exit 1
#          fi
#      - name: Send Slack notification on failure
#        if: failure()
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
#          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
#          AUTHOR_NAME: ${{github.event.commits[0].author.name}}
#          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
#        run: |
#          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x:\nFail Deploy\n*Job*:health-check\n*Repository*: ${APP_NAME}\n*Author*:${AUTHOR_NAME}\n*Commit*:${COMMIT_MESSAGE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL
  notify-result:
    runs-on: ubuntu-latest

    needs: build_and_publish

    steps:
      - name: Send Slack notification on success
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
          AUTHOR_NAME: ${{github.event.commits[0].author.name}}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":white_check_mark:\n Success Deploy\n*Repository*: ${APP_NAME}\n*Author*:${AUTHOR_NAME}\n*Commit*:${COMMIT_MESSAGE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL
