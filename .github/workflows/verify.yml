on:
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  IMAGE_NAME: phelliperodrigues/volunteer-accessory-api
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build and run tests
        run: |
          mvn test -Ptest  -Dspring.profiles.active=test
      - name: Send Slack notification on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          PR_TITLE: ${{ github.event.pull_request.title }} + ${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.name }}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x:\nFail Deploy\n*Job*:test\n*Repository*: ${APP_NAME}\n*Author*:${PR_AUTHOR}\n*Commit/PR*:${PR_TITLE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL

  coverage_validator:
    permissions: write-all
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run Coverage
        run: |
          mvn verify -Ptest -Dspring.profiles.active=test
      - name: Upload Report
        uses: 'actions/upload-artifact@v2'
        with:
          name: report.xml
          path: ${{ github.workspace }}/build/reports/jacoco/testCoverage/testCoverage.xml

      - name: Add coverage to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: |
            ${{ github.workspace }}/**/build/reports/jacoco/prodNormalDebugCoverage/prodNormalDebugCoverage.xml,
            ${{ github.workspace }}/**/build/reports/jacoco/**/debugCoverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 40
          min-coverage-changed-files: 60
      - name: Set COVERAGE global variables
        env:
          OUTPUT: ${{ toString(toJson(steps.jacoco.outputs)) }}
        run: |
          echo "COVERAGE=${OUTPUT}" >> $GITHUB_ENV
      - name: Get the Coverage info
        env:
          OUTPUT: ${{ toJson(steps.jacoco.outputs) }}
        run: |
          echo "Total coverage ${OUTPUT}"
          echo "Changed Files coverage ${{ steps.jacoco.outputs.coverage-changed-files }}"
      - name: Send Slack notification on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          PR_TITLE: |
            ${{ github.event.pull_request.title }}  PR: #${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.name }}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":x:\nFail Deploy\n*Job*:coverage_validator\n*Repository*:${APP_NAME}\n*Author*:${PR_AUTHOR}\n*TITLE*:${PR_TITLE}\n*Coverage*:${COVERAGE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL
  notify-result:
    runs-on: ubuntu-latest

    needs: coverage_validator

    steps:
      - name: Send Slack notification on success
        if: success()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          APP_NAME: ${{ github.event.repository.name }} # Nome do repositório Git (app)
          PR_TITLE: ${{ github.event.pull_request.title }} + ${{ github.event.pull_request.number }}
          PR_AUTHOR: ${{ github.event.pull_request.user.name }}
          PIPE_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\":white_check_mark:\n Success Verify\n*Repository*: ${APP_NAME}\n*Author*:${PR_AUTHOR}\n*Commit/PR*:${PR_TITLE}\n*Coverage*:${COVERAGE}\n*Action*:${PIPE_URL}\"}" $SLACK_WEBHOOK_URL
